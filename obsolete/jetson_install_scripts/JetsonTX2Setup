# Activate all CPU cores for build
	sudo nvpmodel -m 0

# Install opencv
	mkdir -p repos
	cd repos
	git clone https://github.com/jetsonhacks/buildOpenCVTX2.git
	cd buildOpenCVTX2
	./buildOpenCV.sh
	
	## Once its done
	cd ~/opencv/build
	sudo make install

# Install ROS
	git clone https://github.com/jetsonhacks/installROSTX2.git
	cd installROSTX2

	## note: this only install ros-base, rosdep, and rosinstall, not the  full ros desktop
	./installROSTX2 
	
	## Create catkin workspace
	./setupCatkinWorkspace.sh vision_ws
	
# Check L4T version
	head -n 1 /etc/nv_tegra_release

# Use SD card for swap storage
	# Format SD card to ext4 using 'disks' application on Ubuntu

	git clone 
	git clone https://github.com/jetsonhacks/postFlashTX1
	cd postFlashTX1

	# Change 'sanjif32SD' to name of the SD card drive	
	sudo ./createSwapfile.sh -d /media/nvidia/sanjif32SD/ -s 16 -a

	# Check if swap is active
	swapon
		# should list the name of the swap file we just created

	# Remember to disable 'swap' - delete the contents of this file:
        sudo gedit /etc/fstab
        
# Install cuda 8
  mkdir ~/programs/cuda8
  cd ~/programs/cuda8
  wget http://developer.download.nvidia.com/devzone/devcenter/mobile/jetpack_l4t/006/linux-x64/cuda-repo-l4t-8-0-local_8.0.34-1_arm64.deb
  sudo dpkg -i cuda-repo-l4t-8-0-local_8.0.34-1_arm64.deb
  sudo apt-get update
  sudo apt-get install cuda
  
     
# Install tensorflow (need at least 8 GB of storage)
	# follow instructions above to set up swap on SD card (preferable if SSD is available)
	# SSD has faster read/write speeds, and this process places a lot of wear on the used
	# storage
	
	# Remember to de-activate swap once this installation process is over

  # Install cuDNN v7.0.5 Library for Linux
  
      Link: https://developer.nvidia.com/rdp/form/cudnn-download-survey
      mkdir -p ~/programs/cudnn7
      cd ~/programs/cudnn7
      
      # copy files into cudnn7
      tar xvzf cudnn-9.0-linux-x64-v7.tgz
      sudo cp cuda/include/cudnn.h /usr/local/cuda/include
      sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64
      sudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*	
	
	
	git clone https://github.com/jetsonhacks/installTensorFlowTX2.git
	cd installTensorFlowTX2/
	git checkout vL4T28.1TF1.3V3
	
	# Update 'scripts/installBazel.sh': Replace contents with the following
	
      INSTALL_DIR=$PWD
      VERSION=0.10.1
      cd $HOME
      wget --no-check-certificate https://github.com/bazelbuild/bazel/releases/download/$VERSION/bazel-${VERSION}-dist.zip
      unzip bazel-${VERSION}-dist.zip -d bazel-${VERSION}-dist
      sudo chmod -R ug+rwx $HOME/bazel-${VERSION}-dist
      # git clone https://github.com/bazelbuild/bazel.git
      cd ~
      mkdir -p programs
      mv -r bazel-${VERSION}-dist programs/
      cd ~/programs/bazel-${VERSION}-dist
      ./compile.sh 
      sudo cp output/bazel /usr/local/bin
      cd ~
      rm bazel-${VERSION}-dist.zip
  
  
  # Update 'setTensorFlowEV.sh' and 'setTensorFlowEVPy3.sh'
  
      change:
        TF_CUDA_VERSION=8.0 > TF_CUDA_VERSION=9.0
        TF_CUDNN_VERSION=6.0.21 > TF_CUDNN_VERSION=7.0.5
      
  # Update 'buildTensorFlow.sh'
  
      change:
       TF_CUDA_VERSION=8.0 > TF_CUDA_VERSION=9.0
       TF_CUDNN_VERSION=6.0.21 > TF_CUDNN_VERSION=7.0.5
       cd $HOME/tensorflow > cd $HOME/programs/tensorflow
       
  # Update 'cloneTensorFlow.sh'
      change contents to:
      
        INSTALL_DIR=$PWD
        cd $HOME/programs
        rm -rf tensorflow
        git clone https://github.com/tensorflow/tensorflow.git
        cd tensorflow
        git checkout v1.5.0
        #patch -p1 < $INSTALL_DIR/patches/tensorflow.patch
        # Patch up the Workspace.bzl for the Github Checksum issue
        #patch -p1 < $INSTALL_DIR/patches/workspacebzl.patch
       
  # Update 'packageTensorFlow.sh'
  
  # Change contents to:
  
      # NVIDIA Jetson TX2
      cd $HOME/programs/tensorflow
      bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg
      mv /tmp/tensorflow_pkg/tensorflow-*.whl $HOME/programs
     
  # Set up tensorflow for Python 2.7
    # Install pre-requisites
    ./installPrerequisites.sh
    # Clone tensorflow
    ./cloneTensorFlow.sh
    # Set environmental variables
    ./setTensorFlowEV.sh
#      /usr/lib/python2.7/dist-packages
    # Build tensorflow
    ./buildTensorFlow.sh
    # Create wheel file
    ./packageTensorFlow.sh
    # Install wheel file
    pip install $HOME/programs/tensorflow-1.6.0rc0-cp27-cp27mu-linux_aarch64.whl  
    
    
  # Set up tensorflow for Python 3.5
    # Install pre-requisites
    ./installPrerequisitesPy3.sh
    # Clone tensorflow
    ./cloneTensorFlow.sh
    # Set environmental variables
    ./setTensorFlowEVPy3.sh
    # Build tensorflow
    ./buildTensorFlow.sh
    # Create wheel file
    ./packageTensorFlow.sh
    # Install wheel file
    pip install $HOME/programs/tensorflow-1.6.0rc0-cp35-cp35mu-linux_aarch64.whl  
    
  # Check if installation is successful
    python or python3 depending on chosen installation method
    >> import tensorflow as tf
    >> hello = tf.constant("Hello, Tensorflow!")
    >> sess = tf.Session()
    >> print(sess.run(hello))
    
    
bashrc:

export PATH=/usr/local/cuda-9.0/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin
# export LD_LIBRARY_PATH=/usr/local/cuda-9.0/lib64:
source /opt/ros/kinetic/setup.bash
export ROS_MASTER_URI=http://localhost:11311
export ROS_IP=192.168.1.4 
#export ROS_IP=192.168.55.1 
export LD_LIBRARY_PATH=/usr/local/lib:/opt/ros/kinetic/lib:/usr/local/cuda-9.0/lib64:
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/extras/CUPTI/lib64
source ~/casper-vision/devel/setup.bash
